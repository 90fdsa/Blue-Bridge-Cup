C51 COMPILER V9.60.0.0   TRB                                                               04/07/2023 16:28:08 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE TRB
OBJECT MODULE PLACED IN .\Objects\trb.obj
COMPILER INVOKED BY: D:\study\danpianjixilie\keil\C51\BIN\C51.EXE trb.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRIN
                    -T(.\Listings\trb.lst) TABS(2) OBJECT(.\Objects\trb.obj)

line level    source

   1          /*******************************************************************************  
   2          * 文件名称：矩阵键盘实验
   3          * 实验目的：1.掌握矩阵键盘扫描的基本原理
   4          *           2.掌握按键扫描及消除抖动的基本原理
   5          * 实验配置：J3跳线配置为IO方式，J5配置为KBD、J2配置为1-3和2-4
   6          * 实验现象：按下按键，数码管显示在0~15之间变化
   7          * 硬件说明：IAP15F2K61S2@11.0592MHz
   8          * 程序说明：1.转接板上使用P4.4和P4.2代替P3.6 P3.7
   9          *       2.采用状态法进行按键扫描，系统实时性好，
  10          *       且每10ms扫描可以防止抖动。
  11          * 日期版本：2019-6-24/V2.0
  12          *******************************************************************************/
  13          #include "STC15F2K60S2.H"  //用此头文件直接代替REG52.H，请进行两个头文件对比
  14          #include "absacc.h"
  15          
  16                                     //  0    1    2    3    4    5    6    7    8    9   熄灭
  17          code unsigned char tab[] = { 0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90,0xFF};
  18          unsigned char dspbuf[8] = {10,10,10,10,10,10,10,10};  //显示缓冲区
  19          sbit TX = P1^0;   //接收引脚
  20          sbit RX = P1^1;   //发射引脚
  21          
  22          bit key_flag = 0;//按键扫描标志位                                                                         
             -                 
  23          unsigned char key_value=0xFF;//按键值
  24          unsigned char ui_Sonic_flag;
  25          unsigned char uc_Dist; 
  26          /******函数声明***********************/
  27          void read_keyboard(void);
  28          void display();
  29          unsigned char Sonic(void);
  30          void Sonic_Proc(void);
  31          /************************************/
  32          
  33          void cls_buzz(void) //关闭蜂鸣器
  34          {
  35   1        P2 = (P2&0x1F|0xA0);
  36   1        P0 = 0x00;
  37   1        P2 &= 0x1F;
  38   1      }
  39          
  40          void cls_led(void)//关闭所有LED
  41          {
  42   1          P2 = ((P2&0x1f)|0x80);
  43   1        P0 = 0xff;  
  44   1        P2 &= 0x1f;
  45   1      }
  46          
  47          void Timer0Init(void)   //12微秒@12.000MHz
  48          {
  49   1        AUXR &= 0x7F;   //定时器时钟12T模式
  50   1        TMOD &= 0xF0;   //设置定时器模式
  51   1        TL0 = 0xF4;   //设置定时初值
  52   1        TH0 = 0xFF;   //设置定时初值
  53   1        TF0 = 0;    //清除TF0标志
C51 COMPILER V9.60.0.0   TRB                                                               04/07/2023 16:28:08 PAGE 2   

  54   1        TR0 = 0;    //定时器0停止计时
  55   1      }
  56          
  57          void Timer1Init(void)   //12微秒@12.000MHz
  58          {
  59   1        AUXR |= 0x40;   //定时器时钟1T模式
  60   1        TMOD &= 0x0F;   //设置定时器模式
  61   1        TL1 = 0x20;   //设置定时初值
  62   1        TH1 = 0xD1;   //设置定时初值
  63   1        TF1 = 0;    //清除TF0标志
  64   1        TR1 = 1;    //定时器1开始计时
  65   1        ET1 = 1;    //打开定时器中断
  66   1      }
  67          
  68          //主函数
  69          void main(void)
  70          {  
  71   1          cls_buzz();
  72   1          cls_led();
  73   1          Timer0Init();
  74   1          Timer1Init();
  75   1          EA=1;
  76   1          while(1)
  77   1          {   
  78   2              Sonic_Proc();
  79   2              dspbuf[5]=uc_Dist/100;
  80   2              dspbuf[6]=uc_Dist%100/10;
  81   2              dspbuf[7]=uc_Dist%10;
  82   2          }
  83   1      }
  84          
  85          //定时器中断服务函数
  86          void isr_timer_1(void)  interrupt 3  //默认中断优先级 1
  87          {     
  88   1        static unsigned int intr = 0;
  89   1        if(++intr==300)
  90   1        {
  91   2          intr=0;
  92   2          ui_Sonic_flag = 1;   //超声波刷新频率 300ms一次
  93   2        }
  94   1        display(); //1ms执行一次
  95   1      }
  96          
  97          //读取矩阵键盘键值:转接板中使用P42和P44代替8051引脚
  98          //顺序中的P36和P37引脚
  99          void read_keyboard(void)
 100          {
 101   1          static unsigned char hang;
 102   1        static unsigned char key_state=0; 
 103   1        switch(key_state)
 104   1        {
 105   2          case 0:
 106   2          {
 107   3            P3 = 0x0f; P42 = 0; P44 = 0;
 108   3            if(P3 != 0x0f) //有按键按下
 109   3            key_state=1;  
 110   3          }break;
 111   2          case 1:
 112   2          {
 113   3            P3 = 0x0f; P42 = 0; P44 = 0;
 114   3            if(P3 != 0x0f) //有按键按下
 115   3            {
C51 COMPILER V9.60.0.0   TRB                                                               04/07/2023 16:28:08 PAGE 3   

 116   4              if(P30 == 0)hang = 1;
 117   4              if(P31 == 0)hang = 2;
 118   4              if(P32 == 0)hang = 3;
 119   4              if(P33 == 0)hang = 4;//确定行     
 120   4              switch(hang){
 121   5                case 1:{P3 = 0xf0; P42 = 1; P44 = 1;
 122   6                  if(P44 == 0) {key_value=0;key_state=2;}
 123   6                  else if(P42 == 0) {key_value=1;key_state=2;}
 124   6                  else if(P35 == 0) {key_value=2;key_state=2;}
 125   6                  else if(P34 == 0) {key_value=3;key_state=2;}
 126   6                }break;
 127   5                case 2:{P3 = 0xf0; P42 = 1; P44 = 1;
 128   6                  if(P44 == 0) {key_value=4;key_state=2;}
 129   6                  else if(P42 == 0) {key_value=5;key_state=2;}
 130   6                  else if(P35 == 0) {key_value=6;key_state=2;}
 131   6                  else if(P34 == 0) {key_value=7;key_state=2;}
 132   6                }break;
 133   5                case 3:{P3 = 0xf0; P42 = 1; P44 = 1;
 134   6                  if(P44 == 0) {key_value=8;key_state=2;}
 135   6                  else if(P42 == 0) {key_value=9;key_state=2;}
 136   6                  else if(P35 == 0) {key_value=10;key_state=2;}
 137   6                  else if(P34 == 0) {key_value=11;key_state=2;}
 138   6                }break;
 139   5                case 4:{P3 = 0xf0; P42 = 1; P44 = 1;
 140   6                  if(P44 == 0) {key_value=12;key_state=2;}
 141   6                  else if(P42 == 0) {key_value=13;key_state=2;}
 142   6                  else if(P35 == 0) {key_value=14;key_state=2;}
 143   6                  else if(P34 == 0) {key_value=15;key_state=2;}
 144   6                }break;
 145   5              } 
 146   4            }
 147   3            else
 148   3            {
 149   4              key_state=0;  
 150   4            }      
 151   3          }break;
 152   2          case 2:     
 153   2          {
 154   3            P3 = 0x0f; P42 = 0; P44 = 0;
 155   3            if(P3 == 0x0f) //按键放开
 156   3            key_state=0;  
 157   3          }break;
 158   2                  
 159   2          } 
 160   1        
 161   1      }
 162          
 163          
 164          //显示函数
 165          void display(void)
 166          {   
 167   1        static unsigned char dspcom = 0;
 168   1        P0 = 0xff;
 169   1        P2 = ((P2&0x1f)|0xE0); 
 170   1        P2 &= 0x1f;
 171   1      
 172   1        P0 = 1<<dspcom;
 173   1        P2 = ((P2&0x1f)|0xC0); 
 174   1        P2 &= 0x1f;
 175   1      
 176   1        P0 = tab[dspbuf[dspcom]]; 
 177   1          P2 = ((P2&0x1f)|0xE0); 
C51 COMPILER V9.60.0.0   TRB                                                               04/07/2023 16:28:08 PAGE 4   

 178   1        P2 &= 0x1f;
 179   1        
 180   1          if(++dspcom == 8){
 181   2              dspcom = 0;
 182   2          }    
 183   1      }
 184          
 185          unsigned char Sonic(void)
 186          {
 187   1        unsigned char Dist=0,num=10;
 188   1        
 189   1        //TX引脚发送10个频率为40MHz方波
 190   1        Timer0Init();  //初始化定时器0，初始化定时器初值
 191   1        TX = 0;        //发射引脚拉为低电平
 192   1        
 193   1        while(num--)  //发送10个
 194   1        {
 195   2          TR0 = 1;
 196   2          while(!TF0);  //计时时间到，控制周期
 197   2          TF0 = 0;      //手动清除标志位  
 198   2          TX ^= 1;      //取反
 199   2          Timer0Init();  //初始化定时器0，初始化定时器初值  
 200   2        }
 201   1      
 202   1      
 203   1      //接收方波
 204   1        TR0 = 0;    //定时器0停止计时
 205   1        TF0 = 0;    //清除TF0标志
 206   1        TL0 = 0x00; //设置定时初值
 207   1        TH0 = 0x00; //设置定时初值
 208   1        TR0 = 1;
 209   1      
 210   1        while(RX && !TF0);  //等待收到脉冲  或定时溢出
 211   1        TR0 = 0;  //定时器0停止计时
 212   1        
 213   1        if(TF0)   //定时溢出
 214   1        {
 215   2           TF0 = 0; //清除标志位    
 216   2           Dist = 255;
 217   2        }
 218   1        else  //RX接收引脚接收到低电平
 219   1        {
 220   2          Dist = ((TH0<<8)+TL0)*0.017;
 221   2        }
 222   1        
 223   1        return Dist;
 224   1      }
 225          
 226          void Sonic_Proc(void)
 227          {
 228   1        if(ui_Sonic_flag==1)
 229   1        {
 230   2            ui_Sonic_flag = 0;
 231   2            uc_Dist = Sonic();  //测距
 232   2        }
 233   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    666    ----
   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   TRB                                                               04/07/2023 16:28:08 PAGE 5   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
