C51 COMPILER V9.60.0.0   VAS                                                               03/29/2023 14:10:57 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE VAS
OBJECT MODULE PLACED IN .\Objects\vas.obj
COMPILER INVOKED BY: D:\study\danpianjixilie\keil\C51\BIN\C51.EXE vas.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRIN
                    -T(.\Listings\vas.lst) TABS(2) OBJECT(.\Objects\vas.obj)

line level    source

   1          #include "STC15F2K60S2.H"
   2          #include "onewire.h"
   3          #include "iic.h"
   4          
   5          code unsigned char duanma[]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,0xff,
   6                                       0x40,0x79,0x24,0x30,0x19,0x12,0x02,0x78,0x00,0x10,0xff,
   7                                       0xc6,0x8c,0x88};
   8          unsigned char buffer[8]={10,10,10,10,10,10,10,10};
   9          
  10          unsigned char weixuan;
  11          unsigned char key_value;
  12          unsigned char old_key_value;
  13          unsigned char show_mod=1;
  14          unsigned char tem_standard=20;
  15          unsigned char dac_value;
  16          unsigned char dac_output_mod=0;
  17          float true_dac_value;
  18          float temperature;
  19          
  20          unsigned char read_key();
  21          void key_proc();
  22          void display();
  23          void display_fen();
  24          void display_tem();
  25          void display_standard();
  26          void display_dac();
  27          void dac_choose();
  28          void dacmod1();
  29          void dacmod2();
  30          void led_show();
  31          
  32          void close_buzz()
  33          {
  34   1          P0=0x00;
  35   1          P2=(P2&0x1f)|0xa0;
  36   1          P2&=0x1f;
  37   1      }
  38          
  39          void close_led()
  40          {
  41   1          P0=0xff;
  42   1          P2=(P2&0x1f)|0x80;
  43   1          P2&=0x1f;
  44   1      }
  45          
  46          void Timer0Init(void)   //1000微秒@12.000MHz
  47          {
  48   1        AUXR &= 0x7F;   //定时器时钟12T模式
  49   1        TMOD &= 0xF0;   //设置定时器模式
  50   1        TL0 = 0x18;   //设置定时初值
  51   1        TH0 = 0xFC;   //设置定时初值
  52   1        TF0 = 0;    //清除TF0标志
  53   1        TR0 = 1;    //定时器0开始计时
  54   1        ET0 = 1;
C51 COMPILER V9.60.0.0   VAS                                                               03/29/2023 14:10:57 PAGE 2   

  55   1      }
  56          
  57          void main()
  58          {
  59   1          close_buzz();
  60   1          close_led();
  61   1          init_pcf8591();
  62   1          Timer0Init();
  63   1          EA=1;
  64   1          while(1)
  65   1          {
  66   2              display_fen();
  67   2              dac_choose();
  68   2          }     
  69   1      }
  70            
  71          void timer0_proc() interrupt 1
  72          {
  73   1          static unsigned char a;
  74   1          static unsigned int tem;
  75   1          display();
  76   1          if(++a==10)
  77   1          {
  78   2              a=0;
  79   2              led_show();
  80   2              old_key_value=key_value;
  81   2              key_value=read_key();
  82   2              if(old_key_value<key_value){key_proc();}
  83   2          }
  84   1          if(++tem==300)
  85   1          {
  86   2              tem=0;
  87   2              temperature=rd_temperature();
  88   2          }
  89   1      }
  90          
  91          unsigned char read_key()
  92          {
  93   1          unsigned char key;
  94   1          unsigned int value;
  95   1          
  96   1          P3|=0x0f;
  97   1          P44=0;P42=1;P35=1;P34=1;
  98   1          value=P3&0x0f;
  99   1          P44=1;P42=0;P35=1;P34=1;
 100   1          value=(value<<4)|(P3&0x0f);
 101   1          P44=1;P42=1;P35=0;P34=1;
 102   1          value=(value<<4)|(P3&0x0f);
 103   1          P44=1;P42=1;P35=1;P34=0;
 104   1          value=(value<<4)|(P3&0x0f);
 105   1        
 106   1          switch(~value)
 107   1          {
 108   2            case 0x1000:key=1;break;
 109   2            case 0x0100:key=2;break;
 110   2            case 0x0010:key=3;break;
 111   2            case 0x0001:key=4;break;
 112   2            case 0x2000:key=5;break;
 113   2            case 0x0200:key=6;break;
 114   2            case 0x0020:key=7;break;
 115   2            case 0x0002:key=8;break;
 116   2            case 0x4000:key=9;break;
C51 COMPILER V9.60.0.0   VAS                                                               03/29/2023 14:10:57 PAGE 3   

 117   2            case 0x0400:key=10;break;
 118   2            case 0x0040:key=11;break;
 119   2            case 0x0004:key=12;break;
 120   2            case 0x8000:key=13;break;
 121   2            case 0x0800:key=14;break;
 122   2            case 0x0080:key=15;break;
 123   2            case 0x0008:key=16;break;
 124   2            default:key=0;break;
 125   2          }
 126   1          
 127   1          return key;
 128   1      }
 129          
 130          void key_proc()
 131          {
 132   1          switch(key_value)
 133   1          {
 134   2            case 13:
 135   2            {
 136   3                show_mod++;
 137   3                if(show_mod==4){show_mod=1;}
 138   3            }break;
 139   2            case 9:
 140   2            {
 141   3                dac_output_mod=~dac_output_mod;
 142   3            }break;
 143   2            case 10:
 144   2            {
 145   3                if(show_mod==2)
 146   3                {
 147   4                    tem_standard++;
 148   4                    if(tem_standard==100){tem_standard=10;}
 149   4                }
 150   3            }break;
 151   2            case 14:
 152   2            {
 153   3                if(show_mod==2)
 154   3                {
 155   4                    tem_standard--;
 156   4                    if(tem_standard==9){tem_standard=99;}
 157   4                }
 158   3            }break;
 159   2          }
 160   1      }
 161          
 162          void display()
 163          {
 164   1          P0=0xff;
 165   1          P2=(P2&0x1f)|0xe0;
 166   1          P2&=0x1f;
 167   1        
 168   1          P0=1<<weixuan;
 169   1          P2=(P2&0x1f)|0xc0;
 170   1          P2&=0x1f;
 171   1        
 172   1          P0=duanma[buffer[weixuan]];
 173   1          P2=(P2&0x1f)|0xe0;
 174   1          P2&=0x1f;
 175   1        
 176   1          if(++weixuan==8){weixuan=0;}
 177   1      }
 178          
C51 COMPILER V9.60.0.0   VAS                                                               03/29/2023 14:10:57 PAGE 4   

 179          void display_fen()
 180          {
 181   1          switch(show_mod)
 182   1          {
 183   2            case 1:display_tem();break;
 184   2            case 2:display_standard();break;
 185   2            case 3:display_dac();break;
 186   2          }
 187   1      }
 188          
 189          void display_tem()
 190          {
 191   1          buffer[0]=22;buffer[1]=10;buffer[2]=10;buffer[3]=10;
 192   1          buffer[4]=((int)(temperature*100))/1000;
 193   1          buffer[5]=((int)(temperature*100))%1000/100+11;
 194   1          buffer[6]=((int)(temperature*100))%100/10;
 195   1          buffer[7]=((int)(temperature*100))%10;
 196   1      }
 197          
 198          void display_standard()
 199          {
 200   1          buffer[0]=23;buffer[1]=10;buffer[2]=10;buffer[3]=10;
 201   1          buffer[4]=10;
 202   1          buffer[5]=10;
 203   1          buffer[6]=tem_standard/10;
 204   1          buffer[7]=tem_standard%10;
 205   1      }
 206          
 207          void display_dac()
 208          {
 209   1          true_dac_value=dac_value*0.0196;
 210   1          buffer[0]=24;buffer[1]=10;buffer[2]=10;buffer[3]=10;
 211   1          buffer[4]=10;
 212   1          buffer[5]=((int)(true_dac_value*100))/100+11;
 213   1          buffer[6]=((int)(true_dac_value*100))%100/10;
 214   1          buffer[7]=((int)(true_dac_value*100))%10;
 215   1      }
 216          
 217          void dac_choose()
 218          {
 219   1          if(dac_output_mod==0){dacmod1();}
 220   1          else{dacmod2();}
 221   1      }
 222          
 223          void dacmod1()
 224          {
 225   1          if(tem_standard<temperature)
 226   1          {
 227   2            dac_value=255;
 228   2            DAC(dac_value);
 229   2          }
 230   1          else
 231   1          {
 232   2            dac_value=0;
 233   2            DAC(dac_value);
 234   2          }
 235   1      }
 236          
 237          void dacmod2()
 238          {
 239   1          if(temperature<20)
 240   1          {
C51 COMPILER V9.60.0.0   VAS                                                               03/29/2023 14:10:57 PAGE 5   

 241   2              dac_value=51;
 242   2              DAC(dac_value);
 243   2          }
 244   1          if(temperature>20&&temperature<40)
 245   1          {
 246   2              dac_value=51+((char)(temperature)-20)*8;
 247   2              DAC(dac_value);
 248   2          }
 249   1          if(temperature>40)
 250   1          {
 251   2              dac_value=204;
 252   2              DAC(dac_value);
 253   2          }
 254   1      }
 255          
 256          void led_show()
 257          {
 258   1          unsigned char b;
 259   1        
 260   1          if(dac_output_mod==0){b|=0x01;}
 261   1          else{b&=0xfe;}
 262   1          if(show_mod==1){b|=0x02;}
 263   1          else{b&=0xfd;}
 264   1          if(show_mod==2){b|=0x04;}
 265   1          else{b&=0xfb;}
 266   1          if(show_mod==3){b|=0x08;}
 267   1          else{b&=0xf7;}
 268   1          
 269   1          P0=~b;
 270   1          P2=(P2&0x1f)|0x80;
 271   1          P2&=0x1f;
 272   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1176    ----
   CONSTANT SIZE    =     25    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     26       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
